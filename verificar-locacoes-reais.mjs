import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
);

async function verificarLocacoesReais() {
  console.log('üîç Verificando loca√ß√µes ativas REAIS...\n');

  try {
    // 1. Buscar TODAS as loca√ß√µes ativas
    console.log('üìã Buscando todas as loca√ß√µes ativas...');
    const { data: locacoes, error: errorLocacoes } = await supabase
      .from('locacoes')
      .select(`
        id,
        data_locacao,
        data_entrega,
        valor_total,
        valor_seguro,
        status,
        observacoes,
        clientes (
          nome
        ),
        veiculos (
          marca,
          modelo,
          placa
        )
      `)
      .eq('status', 'ativa')
      .order('id');

    if (errorLocacoes) {
      console.error('‚ùå Erro ao buscar loca√ß√µes:', errorLocacoes);
      return;
    }

    console.log(`Total de loca√ß√µes ativas: ${locacoes.length}\n`);

    locacoes.forEach((locacao, index) => {
      console.log(`${index + 1}. LOCA√á√ÉO #${locacao.id}`);
      console.log(`   Cliente: ${locacao.clientes?.nome || 'N/A'}`);
      console.log(`   Ve√≠culo: ${locacao.veiculos?.marca} ${locacao.veiculos?.modelo} - ${locacao.veiculos?.placa}`);
      console.log(`   Per√≠odo: ${locacao.data_locacao} at√© ${locacao.data_entrega}`);
      console.log(`   Valor Total: R$ ${locacao.valor_total}`);
      console.log(`   Valor Seguro: R$ ${locacao.valor_seguro || 0}`);
      console.log(`   Status: ${locacao.status}`);
      console.log(`   Observa√ß√µes: ${locacao.observacoes || 'Nenhuma'}`);
      console.log('   ---\n');
    });

    // 2. Verificar movimenta√ß√µes financeiras de seguro
    console.log('üí∞ Verificando movimenta√ß√µes financeiras de seguro...');
    const { data: movimentacoes, error: errorMov } = await supabase
      .from('movimentacoes_financeiras')
      .select('*')
      .eq('categoria', 'seguro')
      .order('data_movimentacao', { ascending: false });

    if (errorMov) {
      console.error('‚ùå Erro ao buscar movimenta√ß√µes:', errorMov);
      return;
    }

    console.log(`Total de movimenta√ß√µes de seguro: ${movimentacoes.length}\n`);

    if (movimentacoes.length === 0) {
      console.log('‚úÖ Nenhuma movimenta√ß√£o de seguro encontrada (correto!)');
    } else {
      console.log('‚ö†Ô∏è  Movimenta√ß√µes de seguro encontradas:');
      movimentacoes.forEach((mov, index) => {
        console.log(`   ${index + 1}. ID: ${mov.id}`);
        console.log(`      Valor: R$ ${mov.valor}`);
        console.log(`      Data: ${mov.data_movimentacao}`);
        console.log(`      Tipo: ${mov.tipo}`);
        console.log(`      Loca√ß√£o: #${mov.locacao_id || 'N/A'}`);
        console.log(`      Descri√ß√£o: ${mov.descricao || 'N/A'}`);
        console.log('      ---');
      });
    }

    // 3. Verificar se h√° inconsist√™ncias
    console.log('\nüîç AN√ÅLISE DE INCONSIST√äNCIAS:');
    
    const totalSeguroLocacoes = locacoes.reduce((sum, loc) => sum + (loc.valor_seguro || 0), 0);
    const totalMovimentacoes = movimentacoes.reduce((sum, mov) => sum + mov.valor, 0);
    
    console.log(`   Total valor_seguro nas loca√ß√µes: R$ ${totalSeguroLocacoes}`);
    console.log(`   Total movimenta√ß√µes de seguro: R$ ${totalMovimentacoes}`);
    
    if (totalSeguroLocacoes === 0 && totalMovimentacoes === 0) {
      console.log('‚úÖ CORRETO: Nenhum seguro lan√ßado em lugar nenhum');
    } else if (totalSeguroLocacoes === 0 && totalMovimentacoes > 0) {
      console.log('‚ùå PROBLEMA: H√° movimenta√ß√µes de seguro mas nenhuma loca√ß√£o tem valor_seguro');
    } else if (totalSeguroLocacoes > 0 && totalMovimentacoes === 0) {
      console.log('‚ùå PROBLEMA: H√° valor_seguro nas loca√ß√µes mas nenhuma movimenta√ß√£o financeira');
    } else if (totalSeguroLocacoes !== totalMovimentacoes) {
      console.log('‚ùå PROBLEMA: Valores n√£o batem entre loca√ß√µes e movimenta√ß√µes');
    } else {
      console.log('‚úÖ CORRETO: Valores batem entre loca√ß√µes e movimenta√ß√µes');
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

verificarLocacoesReais();